query TestExcludesN = thisModule.squares(500)->collect(e|e+e.expensive())->includes(thisModule.numTakeIn*thisModule.numTakeIn);


helper def : numTakeIn : Integer = 
	Parameters!Parameter.allInstances()->select(e|e.name = 'TakeIn')->first().value
;

helper def : expensiveValue : Integer = 
	Parameters!Parameter.allInstances()->select(e|e.name = 'Expensive')->first().value
;

helper def: squaresSequence(begin: Integer, end: Integer) : Sequence(Integer) = 
	if(begin > end) then 
		Sequence{}
	else
		Sequence{1,2}->collect(x |if(x = 1) then Sequence{begin * begin} else thisModule.squaresSequence(begin+1,end) endif)->flatten()
	endif;
		
helper def : squares(end: Integer) : Sequence(Integer) =
	if (end = 1)
		then Sequence{1}
		else thisModule.squares(end-1)->including(end*end)
	endif;
		
--But this does not flip the bag? Only relevant when calling as sequence... but...		
helper def: take(n: Integer, seq: Sequence(Integer)) : Sequence(Integer) = 
	if(n = 1) then
		Sequence{1}
	else
		thisModule.take(n-1,seq)->including(seq->at(n))
	endif;

helper context Integer def : expensive() : Integer =
	thisModule.factorial(thisModule.expensiveValue)*thisModule.factorial(thisModule.expensiveValue);
	

helper def : factorial(val: Integer) : Integer =
	if(val = 1) then 
		1
	else
		val * thisModule.factorial(val-1)
	endif;