--query TestForAllN = (thisModule.squares(257)->forAll(e| e > e.expensive()).debug());

query TestForAllN = thisModule.squares(257)->forAll(e| e > e.expensive());

helper def : numTakeIn : Integer = 
	Parameters!Parameter.allInstances()->select(e|e.name = 'TakeIn')->first().value
;

helper def : expensiveValue : Integer = 
	Parameters!Parameter.allInstances()->select(e|e.name = 'Expensive')->first().value
;

helper def: squaresBag(begin: Integer, end: Integer) : Bag(Integer) = 
	if(begin > end) then 
		Bag{}
	else
		Bag{1,2}->collect(x |if(x = 1) then Bag{begin * begin} else thisModule.squaresBag(begin+1,end) endif)->flatten()
	endif;
		
helper def : squares(end: Integer) : Bag(Integer) =
	if (end = 1)
		then Bag{1}
		else thisModule.squares(end-1)->including(end*end)
	endif;
		
helper def: take(n: Integer, seq: Bag(Integer)) : Bag(Integer) = 
	if(n = 1) then
		Bag{1}
	else
		let prev:Bag(Integer) = thisModule.take(n-1, seq) in
			prev->including(seq->any(x|prev->excludes(x)))
	endif;

helper context Integer def : expensive() : Integer =
	thisModule.factorial(thisModule.expensiveValue)*thisModule.factorial(thisModule.expensiveValue);

helper def : factorial(val: Integer) : Integer =
	if(val = 1) then 
		1
	else
		val * thisModule.factorial(val-1)
	endif;